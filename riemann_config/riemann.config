; -*- mode: clojure; -*-
; vim: filetype=clojure

(require '[clj-http.client :as client]
         '[cheshire.core :as json]
         '[riemann.query :as query])

; Init logging. No file parameter, log to stdout.
(logging/init)

(def hostname (.getHostName (java.net.InetAddress/getLocalHost)))

(include "alerta.clj")
(include "mq.clj")

(tcp-server :host "0.0.0.0")
(udp-server :host "0.0.0.0")
(ws-server :host "0.0.0.0")
(repl-server)
(graphite-server :host "0.0.0.0")

(instrumentation {:enabled? false})

; reap expired events every 10 seconds
(periodically-expire 10 {:keep-keys [:host :service :tags :metric :ttl :index-time]})

; some helpful functions
(defn now []
    (Math/floor (unix-time)))

; set of severity functions
(defn severity
    [severity message & children]
    (fn [e] ((apply with {:state severity :description message} children) e)))

(def informational (partial severity "informational"))
(def normal (partial severity "normal"))
(def warning (partial severity "warning"))
(def minor (partial severity "minor"))
(def major (partial severity "major"))
(def critical (partial severity "critical"))
(def dedup-alert (changed-state alerta))

; thresholding
(let [index (default :ttl 300 (index))]

    (streams
        index)

    ; Currently, do not use heartbeat with alerta
    ;(streams
    ;    (throttle 1 30
    ;        heartbeat))

    (streams
        (expired
            prn
            (match :service "heartbeat"
                (fn [event]
                    (let [elapsed (- (now) (:metric event))
                        ttl (:ttl event)]
                        ((with {:event "Heartbeat" :group "Riemann" :metric elapsed}
                                (critical (str "No heartbeat from host in last " ttl " seconds") dedup-alert)) event))))))

    ; Include all config files found in directory
    (include "/etc/riemann/conf.d")
)
